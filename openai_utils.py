import os
import openai

# Load API key from environment
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")

openai_client = None
if OPENAI_API_KEY:
    try:
        openai_client = openai.OpenAI(api_key=OPENAI_API_KEY)
        print("OpenAI client initialized (in openai_utils).")
    except ImportError:
        print("Warning: 'openai' library not found (in openai_utils). OpenAI functionalities will be skipped. Run 'pip install openai'.")
        openai_client = None # Ensure it's None if import fails
    except Exception as e:
        print(f"Error initializing OpenAI client (in openai_utils): {e}")
        openai_client = None # Ensure it's None on other errors
else:
    print("OPENAI_API_KEY environment variable not set (in openai_utils). OpenAI functionalities will be skipped.")

def summarize_news_with_openai(news_items: list[str], ticker_symbol: str) -> str | None:
    """
    Summarizes a list of news items using the OpenAI API.

    Args:
        news_items (list[str]): A list of news strings (e.g., title + description).
        ticker_symbol (str): The stock ticker symbol for context.

    Returns:
        str | None: The summarized text, or None if summarization fails or is skipped.
    """
    if not openai_client or not news_items:
        if not news_items:
            print("No news items provided to OpenAI for summarization (in openai_utils).")
        # Message about client not initialized is handled by the top-level print
        return None

    text_to_summarize = ". ".join(news_items[:5]) # Summarize based on the first 5 items
    if len(text_to_summarize) > 3500: # Rough character limit
        text_to_summarize = text_to_summarize[:3500]

    try:
        response = openai_client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": f"You are a financial news summarizer. Provide a concise summary of the following news items regarding {ticker_symbol}."},
                {"role": "user", "content": text_to_summarize}
            ]
        )
        summary = response.choices[0].message.content.strip()
        print("News summary generated by OpenAI (via openai_utils).")
        return summary
    except Exception as e:
        print(f"Error during OpenAI news summarization (in openai_utils): {e}")
        return None

if __name__ == "__main__":
    # This block will only run when the script is executed directly
    print("Testing OpenAI summarization directly...")
    sample_news = [
        "TechCorp announces record profits for Q3, shares surge.",
        "New AI breakthrough by TechCorp set to revolutionize the industry.",
        "Analysts optimistic about TechCorp's future growth."
    ]
    sample_ticker = "TCORP"
    
    if openai_client: # Check if client was initialized
        summary = summarize_news_with_openai(sample_news, sample_ticker)
        if summary:
            print("\n--- Test Summary ---")
            print(summary)
        else:
            print("\nFailed to generate test summary.")
    else:
        print("\nOpenAI client not available, skipping direct test.")